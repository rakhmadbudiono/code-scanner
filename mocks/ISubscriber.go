// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ISubscriber is an autogenerated mock type for the ISubscriber type
type ISubscriber struct {
	mock.Mock
}

// ReadMessage provides a mock function with given fields: timeout
func (_m *ISubscriber) ReadMessage(timeout time.Duration) (*kafka.Message, error) {
	ret := _m.Called(timeout)

	var r0 *kafka.Message
	if rf, ok := ret.Get(0).(func(time.Duration) *kafka.Message); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = rf(timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: topic, rebalanceCb
func (_m *ISubscriber) Subscribe(topic string, rebalanceCb kafka.RebalanceCb) error {
	ret := _m.Called(topic, rebalanceCb)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, kafka.RebalanceCb) error); ok {
		r0 = rf(topic, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewISubscriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewISubscriber creates a new instance of ISubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISubscriber(t mockConstructorTestingTNewISubscriber) *ISubscriber {
	mock := &ISubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
