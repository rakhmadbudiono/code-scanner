// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	orm "github.com/rakhmadbudiono/code-scanner/internal/orm"
	mock "github.com/stretchr/testify/mock"
)

// IORM is an autogenerated mock type for the IORM type
type IORM struct {
	mock.Mock
}

// CreateRepository provides a mock function with given fields: repo
func (_m *IORM) CreateRepository(repo orm.Repository) (*orm.Repository, error) {
	ret := _m.Called(repo)

	var r0 *orm.Repository
	if rf, ok := ret.Get(0).(func(orm.Repository) *orm.Repository); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(orm.Repository) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResult provides a mock function with given fields: res
func (_m *IORM) CreateResult(res orm.Result) (*orm.Result, error) {
	ret := _m.Called(res)

	var r0 *orm.Result
	if rf, ok := ret.Get(0).(func(orm.Result) *orm.Result); ok {
		r0 = rf(res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(orm.Result) error); ok {
		r1 = rf(res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepository provides a mock function with given fields: ID
func (_m *IORM) DeleteRepository(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRepositories provides a mock function with given fields:
func (_m *IORM) GetAllRepositories() ([]orm.Repository, error) {
	ret := _m.Called()

	var r0 []orm.Repository
	if rf, ok := ret.Get(0).(func() []orm.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orm.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllResultsByRepositoryID provides a mock function with given fields: ID
func (_m *IORM) GetAllResultsByRepositoryID(ID string) ([]orm.Result, error) {
	ret := _m.Called(ID)

	var r0 []orm.Result
	if rf, ok := ret.Get(0).(func(string) []orm.Result); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositoryByID provides a mock function with given fields: ID
func (_m *IORM) GetRepositoryByID(ID string) (*orm.Repository, error) {
	ret := _m.Called(ID)

	var r0 *orm.Repository
	if rf, ok := ret.Get(0).(func(string) *orm.Repository); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepository provides a mock function with given fields: repo
func (_m *IORM) UpdateRepository(repo orm.Repository) (*orm.Repository, error) {
	ret := _m.Called(repo)

	var r0 *orm.Repository
	if rf, ok := ret.Get(0).(func(orm.Repository) *orm.Repository); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(orm.Repository) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResult provides a mock function with given fields: res
func (_m *IORM) UpdateResult(res orm.Result) (*orm.Result, error) {
	ret := _m.Called(res)

	var r0 *orm.Result
	if rf, ok := ret.Get(0).(func(orm.Result) *orm.Result); ok {
		r0 = rf(res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(orm.Result) error); ok {
		r1 = rf(res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIORM interface {
	mock.TestingT
	Cleanup(func())
}

// NewIORM creates a new instance of IORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIORM(t mockConstructorTestingTNewIORM) *IORM {
	mock := &IORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
